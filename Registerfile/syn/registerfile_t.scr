##############################################################
#SCRIPT FOR SPEEDING UP and RECORDING the ADDER SYNTHESIS#
# analyzing and checking vhdl netlist#
# here the analyze command is used for each file from bottom to top #
##############################################################
analyze -library WORK -format vhdl {constants.vhd}
analyze -library WORK -format vhdl {registerfile_generic.vhd}
##############################################################
# elaborating the top entity
# choose the architecture you want
elaborate registerfile_generic -architecture behav 
##########################################
# first compilation, without constraints #
compile 
# reporting riming and power after the first synthesis without constraints #
report_timing > registerfile_generic_timeopt_1t.rpt
report_area > registerfile_generic_timeopt_1a.rpt
# forces a combinational max delay of REQUIRED_TIME from each of the inputs
# to each of th eoutput, that is a delay lower than the one found after
# the first compilation step #
# often this is the working clock period of your system #
create_clock -name "CLK" -period 2 CLK
report_timing > registerfile_generic_time_clk.rpt
report_area > registerfile_generic_area_clk.rpt
#Define the delay after the clock
set_max_delay 2 -from [all_inputs] -to [all_outputs]
# optimize
compile -map_effort high
# save report after the optimization with the clock
report_timing > registerfile_generic_timeopt_2t.rpt
report_area > registerfile_generic_timeopt_2a.rpt
# saving files
write -hierarchy -format ddc -output registerfile_generic-behav-topt.ddc
write -hierarchy -format vhdl -output registerfile_generic-behav-topt.vhdl
write -hierarchy -format verilog -output registerfile_generic-behav-topt.v
